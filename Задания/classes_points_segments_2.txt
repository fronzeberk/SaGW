#include <iostream>
#include <cmath>


using namespace std;

class point{
    private: 
    double x,y;
    public:
    point(){
        x=0;
        y=0;
    }
    point(double nx,double ny){
        //перегрузка конструктора
        x=nx;
        y=ny;
    }
    double getX(){
        return x;
    }
    double getY(){
        return y;
    }
    void setX(double nx){
        x=nx;
    }
    void setY(double ny){
        y=ny;
    }
    void printPoint(){
        cout<<"("<<x<<","<<y<<")"<<endl;    
    }
};

class segment{
    private:
    point *P1,*P2;//динамическое использвоние одного класса в другом
    public:
    segment(){
        P1 = new point;
        P2 = new point;
    }
    segment(double x1,double y1,double x2,double y2){
        P1 = new point(x1,y1);
        P2 = new point(x2,y2);
    }
    ~segment(){//деструктов. обязательно разрушение используемых динамических объектов
        delete P1;
        delete P2;
    }   
    
    double length(){
        return sqrt(pow(P1->getX()-P2->getX(),2)+pow(P1->getY()-P2->getY(),2));
    }
    point * getFirstPoint(){//результаттом функции является указатель на объект типа point
        point *tmp = new point(P1->getX(),P1->getY());
        return tmp;
    }
    point * getSecondPoint(){
        point *tmp = new point(P2->getX(),P2->getY());
        return tmp;
    }   
    
    // void print(){//печать координат начала и конца отрезка
        
    // }
    
    point * getMeedle(){//реализовать метод получения точки, которая является серединой отрезка
        point *tmp = new point((P1->getX()+P2->getX())/2, (P1->getY()+P2->getY())/2);
        return tmp;
    }
    
    bool pointOnLine(point *P){//возвращает true если точка P лежит на прямой, на которой лежит отрезок
        return (P->getX() - P1->getX()) * (P2->getY() - P1->getY()) - (P2->getX() - P1->getX()) * (P->getY() - P1->getY()) == 0;
    }
    
    bool pointBelongs(point *P){//возвращает true если точка P принадлежит отрезку
        return (P->getX()-P1->getX())*(P2->getY()-P1->getY())-(P2->getX()-P1->getX())*(P->getY()-P1->getY())==0 && 
        (min(P1->getX(), P2->getX()) <= P->getX() && P->getX() <= max(P1->getX(), P2->getX())) &&
        (min(P1->getY(), P2->getY()) <= P->getY() && P->getY() <= max(P1->getY(), P2->getY()));
    }

    
};
/*
Задание 1. Реализовать следующие функции
*/
bool isPerpendicular(segment *A, segment *B ){//возвращает true если отрезки лежат на перпендикулярнах прямых 
    return (A->getFirstPoint()->getX()-A->getSecondPoint()->getX())*(B->getFirstPoint()->getX()-B->getSecondPoint()->getX()) +
    (A->getFirstPoint()->getY()-A->getSecondPoint()->getY())*(B->getFirstPoint()->getY()-B->getSecondPoint()->getY())==0;
}

bool isPapallel(segment *A, segment *B ){//возвращает true если отрезки лежат на параллельных прямых прямых
    return (A->getFirstPoint()->getX()-A->getSecondPoint()->getX())/(B->getFirstPoint()->getX()-B->getSecondPoint()->getX()) ==
    (A->getFirstPoint()->getY()-A->getSecondPoint()->getY())/(B->getFirstPoint()->getY()-B->getSecondPoint()->getY());
}

bool isCros(segment *A, segment *B ){//возвращает true если отрезки пересекаются
    return (A->getFirstPoint()->getX()*B->getFirstPoint()->getY() - A->getFirstPoint()->getY()*B->getFirstPoint()->getX()) *
    (A->getFirstPoint()->getX()*B->getSecondPoint()->getY() - A->getFirstPoint()->getY()*B->getSecondPoint()->getX())<0 &&
    (A->getSecondPoint()->getX()*B->getFirstPoint()->getY() - A->getSecondPoint()->getY()*B->getFirstPoint()->getX()) *
    (A->getSecondPoint()->getX()*B->getSecondPoint()->getY() - A->getSecondPoint()->getY()*B->getSecondPoint()->getX())<0;
}

point * getCrosPoint(segment *A, segment *B ){//возвращает указатель на объект с координатами точки пересечения
    double x1 = A->getFirstPoint()->getX();
    double y1 = A->getFirstPoint()->getY();
    double x2 = A->getSecondPoint()->getX();
    double y2 = A->getSecondPoint()->getY();
    double x3 = B->getFirstPoint()->getX();
    double y3 = B->getFirstPoint()->getY();
    double x4 = B->getSecondPoint()->getX();
    double y4 = B->getSecondPoint()->getY();
    
    double n;
    if (y2 - y1 != 0) {  // a(y)
        double q = (x2 - x1) / (y1 - y2);   
        double sn = (x3 - x4) + (y3 - y4) * q; if (!sn) { return 0; }  // c(x) + c(y)*q
        double fn = (x3 - x1) + (y3 - y1) * q;   // b(x) + b(y)*q
        n = fn / sn;
    }
    else {
        if (!(y3 - y4)) { return 0; }  // b(y)
        n = (y3 - y1) / (y3 - y4);   // c(y)/b(y)
    }
    double x = x3 + (x4 - x3) * n;  // x3 + (-b(x))*n
    double y = y3 + (y4 - y3) * n;  // y3 +(-b(y))*n
    point *tmp = new point(x,y);
    return tmp;
}

//Задание 2
//реализовать динамический массив Точек (статический с частичным использванием -10 к карме программиста)
//реализовать ввод и вывод массива течер
void printArray(point* A, int n){
    for (int i=0; i<n; i++){
        cout <<"("<< A[i].getX()<<","<<A[i].getY()<<") ";
    }
    cout<<endl;
}

// void addElemToArr(point *A, int n, point *P){
//     point *ms = new point[n+1];
//     for (int i=0; i<n; i++){
//         ms[i]=A[i];
//     }
//     ms[n]=*P;
//     A=ms;
// }

// реализовать функцию которая принимает указанный массив точек и возвращает длину соответствующей незамкнутой кривой
double lenCurveQ(point* A, int n){
    double sumL = 0.0;
    for (int i=0; i<n-1; i++){
        sumL+= sqrt(pow(A[i+1].getX()-A[i].getX(), 2)+pow(A[i+1].getY()-A[i].getY(), 2));
    }
    return sumL;
}

// реализовать функцию которая принимает указанный массив точек и возвращает длину соответствующей замкнутой кривой
double lenCurveO(point* A, int n){
    double sumL = 0.0;
    for (int i=0; i<n-1; i++){
        sumL+= sqrt(pow(A[i+1].getX()-A[i].getX(), 2)+pow(A[i+1].getY()-A[i].getY(), 2));
    }
    sumL+=sqrt(pow(A[n-1].getX()-A[0].getX(), 2)+pow(A[n-1].getY()-A[0].getY(), 2));
    return sumL;
}

// реализовать функцию которая принимает указанный массив точек и возвращает площадь соответствующей замкнутой кривой
double squareFig(point* A, int n){
    double summ = 0.0;
    for (int i=0; i<n-1; i++){
        summ+= A[i].getX() * A[i+1].getY() - A[i].getY() * A[i+1].getX();
    }
    summ+= A[n-1].getX() * A[0].getY() - A[n-1].getY() * A[0].getX();
    return 0.5 * abs(summ);
}
    
// реализовать функцию которая принимает указанный массив точек и возвращает true если соответствующая замкнута кривая является выпуклой
bool isConvex(point* A, int n){
    if (n<3) return false;
    bool plus = (((A[1].getX()-A[0].getX()) * (A[n-1].getY()-A[0].getY()) - (A[1].getY()-A[0].getY()) * (A[n-1].getX()-A[0].getX()))/
    ((A[1].getX()-A[0].getX()) * (A[n-1].getY()-A[0].getY()) - (A[1].getY()-A[0].getY()) * (A[n-1].getX()-A[0].getX())))>0;
    bool Tplus = plus;
    for (int i=1; i<n-1; i++){
        double dx1 = A[i].getX()-A[i-1].getX();
        double dy1 = A[i].getY()-A[i-1].getY();
        double dx2 = A[i+1].getX()-A[i].getX();
        double dy2 = A[i+1].getY()-A[i].getY();
        plus=(dx1*dy2-dy1*dx2)/(dx1*dy2-dy1*dx2)>0;
        if (plus!=Tplus) return false;
    }
    plus = ((A[n-1].getX()-A[0].getX()) * (A[n-2].getY()-A[n-1].getY()) - (A[n-1].getY()-A[0].getY()) * (A[n-2].getX()-A[n-1].getX()))>0;
    return plus==Tplus;
}



int main()
{
    // point P;
    // P.printPoint();
    // point P2(4,6);
    // P2.printPoint();
    // segment *AB = new segment(2,2,5,5);
    // cout << AB->length();
    
    // point *AB1 = AB->getFirstPoint();
    // cout << endl;
    // AB1->printPoint();
    
    // point *AB2 = AB->getMeedle(); // проверка нахождения середины отрезка
    // AB2->printPoint();
    
    // point *P3 = new point(7,6); // проверка на принадлежность точки прямой
    // bool B = AB->pointOnLine(P3);
    // cout << B << endl;
    
    // point *P4 = new point(5,5); // проверка на принадлежность точки отрезку
    // bool B2 = AB->pointBelongs(P4);
    // cout << B2 << endl;
    
    // segment *A = new segment(8,6,6,3); // проверка на перпендикулярность отрезков
    // segment *B = new segment(8,6,2,10);
    // bool G = isPerpendicular(A,B);
    // cout << G << endl;
    
    // segment *C = new segment(1,9,3,10); // проверка на параллельность отрезков
    // segment *D = new segment(4,9,2,8);
    // bool G2 = isPapallel(C,D);
    // cout << G2 << endl;
    
    // segment *E = new segment(0,0,1,1); // проверка на пересечение отрезков
    // segment *F = new segment(0,1,1,0);
    // bool G3 = isCros(E,F);
    // cout << G3 << endl;
    
    // point *PCros = getCrosPoint(E,F); // точка пересечения отрезков
    // PCros->printPoint();
    
    int len=5;
    point *arrPoint = new point[len];
    arrPoint[0] = *new point(1,1);
    arrPoint[1] = *new point(1,3);
    arrPoint[2] = *new point(2,5);
    arrPoint[3] = *new point(5,3);
    arrPoint[4] = *new point(2.5,4);
    
    printArray(arrPoint, len); // вывод массива точек
    
    // addElemToArr(arrPoint, len, P1); // ввод массива точек ????????
    // printArray(arrPoint, len+1);
    
    cout<<"Длина кривой равна: "<<lenCurveQ(arrPoint, len)<<endl; // длина незамкнутой кривой
    cout<<"Длина кривой равна: "<<lenCurveO(arrPoint, len)<<endl; // длина замкнутой кривой
    cout<<"Площадь фигуры: "<<squareFig(arrPoint, len)<<endl; // площадь фигуры по формуле Гаусса
    cout<<"Фигура выпуклая: "<<isConvex(arrPoint, len)<<endl; // проверка выпуклости фигуры через произведение векторов
    
    return 0;
}

